# GOOGLE CIVIC INFORMATION API
require 'csv'
require 'google/apis/civicinfo_v2'
require 'pry-byebug'
require 'erb'

class LegAPI

    def initialize()
        @civic_info
        @contents
        @template_letter = File.read('letter_template.html')
    end

    # Cleans the zipcodes
    def clean_zipcode(zipcode)
        zipcode.to_s.rjust(5, '0')[0..4]
    end

    # Creates civic info object and sets API key
    def set_civic_info(input_key='AIzaSyClRzDqDh5MsXwnCWi0kOiiBivP6JsSyBw')
        @civic_info = Google::Apis::CivicinfoV2::CivicInfoService.new
        @civic_info.key = input_key
    end 

    # Get the values from the CSV file.
    def get_attendee_info(file_name='event_attendees.csv') 
        @contents = CSV.open(
            file_name,
            headers: true, # CSV contains headers
            header_converters: :symbol # Turn headers to sypbols
        )
    end

    # Generate list of officials for each atendee
    def generate_officials()
        
        #Check if the contents file is not nil
        if @contents != nil 
            
            # Iterate through every row of data from CSV. Every "Person"
            @contents.each do |row|
                # Get name and Cleaned zip code
                name = row[:first_name]
                zipcode = clean_zipcode(row[:zipcode])
                
                # Now use the zip code to find the legislators in that zip code
                begin # This is like a try/catch block
                    legislators = @civic_info.representative_info_by_address(
                        address: zipcode,
                        levels: 'country',
                        roles: ['legislatorUpperBody', 'legislatorLowerBody']
                    )
                    
                    # Get all of the officials listed under "officials query"
                    officials = legislators.officials
                    
                    # Turn the officials into a map to get the Key Value pairs such as name->patty
                    # the & makes sure nil values wont mess it up
                    officials_names = officials.map(&:name)
                    # Create a string of all the names
                    names_string = officials_names.join(", ")
                    generate_mail(name, zipcode, names_string)
                    
                rescue
                    'You can find your representatives by visiting www.commoncause.org/take-action/find-elected-officials'
                end
            
            end
        # If contents are nil, then we have an error
        else
            puts "Error reading from CSV file"
        end
    end

    # Generate a html mail file based on the specific person
    def generate_mail(name, zipcode, officials_names)
        # binding.pry
        letter = @template_letter.clone # make a clone of the template so it doesn't point to it
        letter.gsub!('FIRST_NAME', name) # Append the letter with the given name
        letter.gsub!('LEGISLATORS', officials_names)

        Dir.mkdir('output') unless Dir.exist?('output')

        filename = "output/thanks_#{name}_#{zipcode}.html"
        puts filename

        File.open(filename, 'w') do |file|
            file.puts letter
        end
        puts "#{name} #{zipcode}-> #{officials_names}"
        
    end

    # Method for generating an ERB template. Make sure to include ERB
    def generate_erb(name, zipcode, officials_names)
        template_letter = File.read('letter_template_erb.erb')
        erb_template = ERB.new template_letter
        form_letter = erb_template.result(binding)
        puts form_letter
    end

end

my_api = LegAPI.new
# binding.pry
my_api.set_civic_info
my_api.get_attendee_info
my_api.generate_officials
my_api.generate_erb("Wesley", "93211", "John, Jim, Happy, Poppy")
puts "\nEnd Of File"